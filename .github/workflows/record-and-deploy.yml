name: Record and Deploy

on:
  workflow_dispatch:
    inputs:
      score:
        description: '気分のスコア (0-10)'
        required: true
        type: choice
        options:
          - '0'
          - '1'
          - '2'
          - '3'
          - '4'
          - '5'
          - '6'
          - '7'
          - '8'
          - '9'
          - '10'
      reply_broadcast:
        description: '2回目以降の投稿でスレッド外にも通知するか'
        required: false
        type: boolean
        default: true
      note:
        description: '任意のメモ'
        required: false
        type: string
      date:
        description: '記録日時 (YYYY-MM-DDTHH:MM:SS+09:00形式, 未入力なら現在時刻)'
        required: false
        type: string
      verify_nda:
        description: 'この投稿には NDA に抵触する内容が含まれていないことを確認しました。'
        required: true
        type: boolean

permissions:
  contents: write
  pages: write
  id-token: write

env:
  INPUT_DATE: ${{ github.event.inputs.date }}
  INPUT_SCORE: ${{ github.event.inputs.score }}
  INPUT_NOTE: ${{ github.event.inputs.note }}
  INPUT_VERIFY_NDA: ${{ github.event.inputs.verify_nda }}
  LIST_FILE: public/data/history-list.jsonl

jobs:
  record:
    name: Record Mood History
    runs-on: ubuntu-latest
    steps:
      - name: Checkout Repository
        uses: actions/checkout@v4

      - name: Verify NDA
        if: ${{ !github.event.inputs.verify_nda }}
        run: |
          echo "NDA verification is required. Please check the box in the workflow dispatch inputs."
          exit 1

      - name: Parse and Record Inputs
        id: record
        run: |
          import os, sys, json
          import html
          from datetime import datetime, timezone, timedelta
          from pathlib import Path

          # 入力値取得
          input_date = os.environ.get('INPUT_DATE')
          input_score = os.environ.get('INPUT_SCORE')
          input_note = os.environ.get('INPUT_NOTE')
          list_file = os.environ.get('LIST_FILE')
          reply_broadcast = os.environ.get('REPLY_BROADCAST')

          # REPLY_BROADCAST: true/false → 1/0
          if reply_broadcast is not None:
              if reply_broadcast.lower() == 'true':
                  reply_broadcast = '1'
              else:
                  reply_broadcast = '0'
              # GITHUB_ENV へ書き出し
              with open(os.environ['GITHUB_ENV'], 'a', encoding='utf-8') as f:
                  f.write(f'REPLY_BROADCAST={reply_broadcast}\n')

          # 日付パース: 未入力なら現在時刻（JST)，厳格にISO 8601チェック
          if not input_date:
              now = datetime.now(timezone(timedelta(hours=9)))
              input_date = now.isoformat()
          try:
              dt = datetime.fromisoformat(input_date)
          except Exception:
              print(f'[ERROR] date は ISO 8601 形式で入力してください: {input_date}', file=sys.stderr)
              sys.exit(1)

          # 年月日を切り出す
          input_yearmonth = input_date[:4] + '-' + input_date[5:7]
          history_file = f'public/data/history/{input_yearmonth}.jsonl'

          # LIST_FILE の更新
          Path('public/data').mkdir(parents=True, exist_ok=True)
          Path(list_file).touch(exist_ok=True)
          found = False
          with open(list_file, encoding='utf-8') as f:
              for line in f:
                  try:
                      obj = json.loads(line)
                      if obj.get('date') == input_yearmonth:
                          found = True
                          break
                  except Exception:
                      continue
          if not found:
              with open(list_file, 'a', encoding='utf-8') as f:
                  f.write(json.dumps({'date': input_yearmonth}, ensure_ascii=False, separators=(',', ':')) + '\n')

          # HISTORY_FILE の更新
          Path('public/data/history').mkdir(parents=True, exist_ok=True)
          data = {'date': input_date, 'score': int(input_score)}
          if input_note:
              data['note'] = input_note
          with open(history_file, 'a', encoding='utf-8') as f:
              f.write(json.dumps(data, ensure_ascii=False, separators=(',', ':')) + '\n')

          # $GITHUB_STEP_SUMMARY への Markdown/HTML 出力
          def to_jst(dt):
              if dt.tzinfo is None:
                  dt = dt.replace(tzinfo=timezone.utc)
              jst = dt.astimezone(timezone(timedelta(hours=9)))
              return jst.strftime('%Y-%m-%d %H:%M:%S JST')

          esc = html.escape
          summary = ["### 追加されたエントリ\n", "<table>"]
          summary.append(f"<tr>\n<th>Date</th><td>{esc(to_jst(dt))}</td>\n</tr>")
          summary.append(f"<tr>\n<th>Score</th>\n<td>{esc(str(input_score))}</td>\n</tr>")
          if input_note:
              summary.append(f"<tr>\n<th>Note</th>\n<td>{esc(input_note)}</td>\n</tr>")
          summary.append("</table>\n")
          with open(os.environ['GITHUB_STEP_SUMMARY'], 'a', encoding='utf-8') as f:
              f.write('\n'.join(summary))

          # GITHUB_ENV へ補完済みinput_dateを書き出し
          with open(os.environ['GITHUB_ENV'], 'a', encoding='utf-8') as f:
              f.write(f'INPUT_DATE={input_date}\n')
        env:
          INPUT_DATE: ${{ env.INPUT_DATE }}
          INPUT_SCORE: ${{ env.INPUT_SCORE }}
          INPUT_NOTE: ${{ env.INPUT_NOTE }}
          LIST_FILE: ${{ env.LIST_FILE }}
          REPLY_BROADCAST: ${{ github.event.inputs.reply_broadcast }}
        shell: python

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 24

      - name: Install Dependencies (Node.js)
        run: |
          npm ci --include=dev

      - name: Build and Preview (Vite)
        run: |
          npm run build:dev
          npm run preview &
          sleep 5

      - name: Export PNG via Puppeteer
        run: |
          npx ts-node scripts/export_png.mts
        env:
          EXPORT_PNG_URL: http://localhost:4173

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install Python dependencies
        run: |
          pip install requests

      - name: Notify Slack (with PNG if first of the day)
        env:
          INPUT_DATE: ${{ env.INPUT_DATE }}
          INPUT_SCORE: ${{ env.INPUT_SCORE }}
          INPUT_NOTE: ${{ env.INPUT_NOTE }}
          SLACK_CHANNEL_ID: ${{ secrets.SLACK_CHANNEL_ID }}
          SLACK_USER_TOKEN: ${{ secrets.SLACK_USER_TOKEN }}
          REPLY_BROADCAST: ${{ env.REPLY_BROADCAST }}
        run: |
          python scripts/notify_slack.py

      - name: Amend Commit and Push Changes
        uses: ryancyq/github-signed-commit@v1
        env:
          GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          files: |
            public/data/history-list.jsonl
            public/data/history/*.jsonl
            public/data/latest-slack-update.json
          commit-message: |
            ${{ github.event.inputs.date }} / Score [${{ github.event.inputs.score }}]

            ${{ github.event.inputs.note }}

  deploy:
    needs: record
    uses: ./.github/workflows/deploy.yml
    with:
      ref: ${{ github.ref }}
